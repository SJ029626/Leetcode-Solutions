Given two strings s1 and s2, return true if s2 contains the permutation of s1.

In other words, one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.

Solution:
class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        d1, d2 = Counter(s1), Counter(s2[:len(s1)])
        for start in range(len(s1), len(s2)):
            if d1 == d2: return True
            d2[s2[start]] += 1
            d2[s2[start-len(s1)]] -= 1
            if d2[s2[start-len(s1)]] == 0: 
                del d2[s2[start-len(s1)]]
        return d1 == d2
        #first = list(s1)[0]
        #second = list(s1)[1:]
        #final = "".join(second)+"".join(first)
        #print(final)
        '''
        for i in s1:
            if s1.count(i)>s2.count(i):
                return False
            elif s1.count(i)<=s2.count(i):
                return True
        '''
        #p = set(Counter(s1).values())-set(Counter(s2).values())
        #print(Counter(s1).values(), Counter(s2).values())
        #if p:
        #    return True
        #else:
        #    return False
        '''
        if len(s1)>len(s2):
            return False
        if s1 in s2:
            return True
        x = list(permutations(s1, len(s1)))
        for i in x:
            if "".join(list(i)) in s2:
                return True
                break
        return False
        '''