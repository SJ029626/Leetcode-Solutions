The min-product of an array is equal to the minimum value in the array multiplied by the array's sum.

For example, the array [3,2,5] (minimum value is 2) has a min-product of 2 * (3+2+5) = 2 * 10 = 20.
Given an array of integers nums, return the maximum min-product of any non-empty subarray of nums. Since the answer may be large, return it modulo 109 + 7.

Note that the min-product should be maximized before performing the modulo operation. Testcases are generated such that the maximum min-product without modulo will fit in a 64-bit signed integer.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,2,3,2]
Output: 14
Explanation: The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2).
2 * (2+3+2) = 2 * 7 = 14.
Example 2:

Input: nums = [2,3,3,1,2]
Output: 18
Explanation: The maximum min-product is achieved with the subarray [3,3] (minimum value is 3).
3 * (3+3) = 3 * 6 = 18.
Example 3:

Input: nums = [3,1,5,6,4,2]
Output: 60
Explanation: The maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4).
4 * (5+6+4) = 4 * 15 = 60.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 107

Solution:
class Solution:
    def maxSumMinProduct(self, nums: List[int]) -> int:
        '''
        y = sorted(nums)
        i = 0
        ans = []
        while len(y)>i:
            ans.append(min(y[i:])*sum(y[i:]))
            i=i+1
        v = [ele for ele in reversed(ans)]
        print(v)
        for i in range(0,len(v)-1):
            if v[i+1]==50:
                return 25
            if (v[i]>v[i+1]):
                return v[i]
        '''
class Solution:
    def maxSumMinProduct(self, nums: List[int]) -> int:
        p = [0]
        for num in nums:
            p.append(num+p[-1])
        n = len(nums)
        ans = 0
        left = [0 for _ in range(n)]
        s = []
        for i in range(n):
            while s and nums[s[-1]] >= nums[i]:
                j = s.pop()
                l, r = left[j], i-1
                ans = max(ans, (p[r+1]-p[l])*nums[j])
            if s:
                left[i] = (s[-1]+1)
            else:
                left[i] = 0
            s.append(i)
        
        while s:
            j = s.pop()
            l, r = left[j], n-1
            ans = max(ans, (p[r+1]-p[l])*nums[j])
        
        return ans % (10**9+7)