We are given head, the head node of a linked list containing unique integer values.

We are also given the list nums, a subset of the values in the linked list.

Return the number of connected components in nums, where two values are connected if they appear consecutively in the linked list.

Example 1:

Input: 
head: 0->1->2->3
nums = [0, 1, 3]
Output: 2
Explanation: 
0 and 1 are connected, so [0, 1] and [3] are the two connected components.
Example 2:

Input: 
head: 0->1->2->3->4
nums = [0, 3, 1, 4]
Output: 2
Explanation: 
0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.
Note:

If n is the length of the linked list given by head, 1 <= n <= 10000.
The value of each node in the linked list will be in the range [0, n - 1].
1 <= nums.length <= 10000.
nums is a subset of all values in the linked list.

Solution:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def numComponents(self, head: ListNode, nums: List[int]) -> int:
        '''
        curr = head
        k = head
        k = head.next
        a = []
        l = []
        count = 0
        s = head.val
        l.append(s)
        while k:
            l.append(k.val)
            k = k.next
        while curr and curr.next:
            if curr.val in nums and curr.next.val in nums and (curr.val+1==curr.next.val):
                a.append(curr.val)
                a.append(curr.next.val)
                count+=1
                curr = curr.next
            else:
                curr = curr.next
        for i in range(len(l)-1):
            if l[i] in nums and l[i] not in a and l[i]==l[i+1]:
                count+=1
        return count
        Solution 2:
        count=0
        i=head
        while i:
            if i.val in nums:
                count+=1
                while i and i.val in nums:
                    i=i.next
            else :i=i.next
        return count
        '''
	#Solution3
        count = 0
        num_list = set(nums)
        curr = head
        while curr and curr.next:
            if curr.val in num_list and curr.next.val not in num_list: count+=1
            curr = curr.next
        if curr and curr.val in num_list:
            count += 1
        return count