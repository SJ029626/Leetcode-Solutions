A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.

Also, a self-dividing number is not allowed to contain the digit zero.

Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.

Example 1:
Input: 
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
Note:

The boundaries of each input argument are 1 <= left <= right <= 10000.

Solution:
class Solution:
    def selfDividingNumbers(self, left: int, right: int) -> List[int]:
        
        ans = []
        for i in range(left, right+1):
            x = self.check(i)
            if x:
                ans.append(i)
        return ans
        #print(str(12) % int(2))
        #return [number for number in range(left, right+1) if '0' not in str(number) and all((number % int(char) == 0 for char in str(number)))]
        #return [x for x in range(left, right+1) if all((i and (x % i==0) for i in map(int, str(x))))]
    def check(self, n)->int:
        for d in str(n):
            if d == '0' or n % int(d) > 0:
                return False
        return True
    
    