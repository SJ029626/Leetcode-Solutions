You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.

Return the merged string.

 

Example 1:

Input: word1 = "abc", word2 = "pqr"
Output: "apbqcr"
Explanation: The merged string will be merged as so:
word1:  a   b   c
word2:    p   q   r
merged: a p b q c r
Example 2:

Input: word1 = "ab", word2 = "pqrs"
Output: "apbqrs"
Explanation: Notice that as word2 is longer, "rs" is appended to the end.
word1:  a   b 
word2:    p   q   r   s
merged: a p b q   r   s
Example 3:

Input: word1 = "abcd", word2 = "pq"
Output: "apbqcd"
Explanation: Notice that as word1 is longer, "cd" is appended to the end.
word1:  a   b   c   d
word2:    p   q 
merged: a p b q c   d
 

Constraints:

1 <= word1.length, word2.length <= 100
word1 and word2 consist of lowercase English letters.

Solution:
class Solution:
    def mergeAlternately(self, word1: str, word2: str) -> str:
        '''
        merge_string = []
        min_val = min(len(word1), len(word2))
        for i in range(min_val):
            merge_string+=word1[i]
            merge_string+=word2[i]
        merge_string.append(word1[min_val:])
        merge_string.append(word2[min_val:])
        return "".join(merge_string)
        '''
        '''
        merge_string = ''
        list1,list2 = list(word1), list(word2)
        while list1 or list2:
            if list1:
                merge_string+=list1.pop(0)
            if list2:
                merge_string+=list2.pop(0)
        return "".join(merge_string)
        '''
        m = ''
        l1,l2 = list(word1), list(word2)
        while l1 or l2:
            if l1:
                m+=l1.pop(0)
            if l2:
                m+=l2.pop(0)
        return m
        