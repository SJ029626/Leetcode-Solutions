Given an unsorted integer array nums, find the smallest missing positive integer.

 

Example 1:

Input: nums = [1,2,0]
Output: 3
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
 

Constraints:

1 <= nums.length <= 300
-231 <= nums[i] <= 231 - 1
 

Follow up: Could you implement an algorithm that runs in O(n) time and uses constant extra space?

Solution:
class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        '''
        max_num = max(nums)
        # Case 1
        if 1 not in nums:
            return 1
        list1 = [i for i in range(0, max_num+1)]
        value = list(set(list1)-set(nums))
        # Case 2
        d = 0
        i = 0
        while i < len(list1):
            if (i in nums) and (i in list1):
                d = 1
                continue
            d=0
            i = i+1
        if(d==0):
            return max_num+1
        # Case 3
        for i in value:
            if i>0:
                return i
        '''
        i, trigger=1,0
        while i<(len(nums)+1):
            if i in nums:
                trigger = 1
            else:
                return i
            i=i+1
        if trigger:
            return len(nums)+1
        '''
        for i in range(len(nums)+1):
            if count not in nums:
                    return count
            count+=1
        '''