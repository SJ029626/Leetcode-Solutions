In a town, there are n people labelled from 1 to n.  There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.

If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return -1.

 

Example 1:

Input: n = 2, trust = [[1,2]]
Output: 2
Example 2:

Input: n = 3, trust = [[1,3],[2,3]]
Output: 3
Example 3:

Input: n = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1
Example 4:

Input: n = 3, trust = [[1,2],[2,3]]
Output: -1
Example 5:

Input: n = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]
Output: 3
 

Constraints:

1 <= n <= 1000
0 <= trust.length <= 104
trust[i].length == 2
trust[i] are all different
trust[i][0] != trust[i][1]
1 <= trust[i][0], trust[i][1] <= n

class Solution:
    def findJudge(self, n: int, trust: List[List[int]]) -> int:
        first = []
        second = []
        if n==1 and len(trust)==0:
            return 1
        for i in trust:
            first.append(i[0])
            second.append(i[1])
        x = list((set(second)-set(first)))
        if len(x)!=0:
            x = x[0]
        else:
            return -1
        if second.count(x)<n-1:
            return -1
        return x
        '''
        for i in trust:
            if x in i:
                v = i[0]
                w = i[1]
                if v in first and v in second:
                    if w==x and first.count(v)<2:
                        return x
                else:
                        return -1
        '''
        