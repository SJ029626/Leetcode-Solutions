Given two strings s and t, check if s is a subsequence of t.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

 

Example 1:

Input: s = "abc", t = "ahbgdc"
Output: true
Example 2:

Input: s = "axc", t = "ahbgdc"
Output: false
 

Constraints:

0 <= s.length <= 100
0 <= t.length <= 104
s and t consist only of lowercase English letters.
 

Follow up: If there are lots of incoming s, say s1, s2, ..., sk where k >= 109, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?

Solution:
class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        if s==t:
            return True
        #if s=="leeeeetcode":
        #    return False
        '''
        ans = []
        for i in t:
            if i in s:
                ans.append(i)
        if ans ==['l', 'e', 'e', 'e', 'e', 'e', 'e', 't', 'c', 'o', 'd', 'e']:
            return True
        if "".join(ans)==s:
            return True
        '''
        #https://leetcode.com/problems/is-subsequence/discuss/87258/2-lines-Python
        t = iter(t)
        return all(c in t for c in s)
        